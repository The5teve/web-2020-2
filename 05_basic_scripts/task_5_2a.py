# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip = str(input('Введите IP-сеть в формате 10.1.1.0/24 : '))
ipaddress = '''
Network:
{:<9} {:<9} {:<9} {:<9}
{:<9} {:<9} {:<9} {:<9}

Mask:
{:<9}
{:<9} {:<9} {:<9} {:<9}
{:<9} {:<9} {:<9} {:<9}
'''

if ip.find('/') and ip.count('.')==3:
	ipaddr=ip.split('/')[0]
	ipmask=int(ip.split('/')[1])
	obip='{:08b}{:08b}{:08b}{:08b}'.format(int(ipaddr.split('.')[0]),int(ipaddr.split('.')[1]),int(ipaddr.split('.')[2]),int(ipaddr.split('.')[3]))[0:int(ipmask)]+'0'*(32-int(ipmask))
	obmask='1'*ipmask+'0'*(32-int(ipmask))
	print(ipaddress.format(int(obip[0:8],2),int(obip[8:16],2),int(obip[16:24],2),int(obip[24:32],2),obip[0:8],obip[8:16],obip[16:24],obip[24:32],'/'+str(ipmask),int(obmask[0:8],2),int(obmask[8:16],2),int(obmask[16:24],2),int(obmask[24:32],2),obmask[0:8],obmask[8:16],obmask[16:24],obmask[24:32]))
else:
	print('Неверный формат')